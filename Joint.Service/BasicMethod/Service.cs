

//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//	   生成时间 2020-02-21 13:32:07 by Jeasu
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Joint.IService;
using Joint.IRepository;
using Joint.Entity;
using Joint.DLLFactory;

namespace Joint.Service
{	

	public partial class BottleService : BaseService<Bottle>, IBottleService
    {
		new public IBottleRepository currentRepository { get; set; }
		        
        public BottleService()
            : base(RepositoryFactory.Create<IBottleRepository>())
        {
			//设置当前仓储为Bottle仓储
			currentRepository = base.currentRepository as IBottleRepository;
        } 
    }

	
	public partial class ConversationService : BaseService<Conversation>, IConversationService
    {
		new public IConversationRepository currentRepository { get; set; }
		        
        public ConversationService()
            : base(RepositoryFactory.Create<IConversationRepository>())
        {
			//设置当前仓储为Conversation仓储
			currentRepository = base.currentRepository as IConversationRepository;
        } 
    }

	
	public partial class ModuleService : BaseService<Module>, IModuleService
    {
		new public IModuleRepository currentRepository { get; set; }
		        
        public ModuleService()
            : base(RepositoryFactory.Create<IModuleRepository>())
        {
			//设置当前仓储为Module仓储
			currentRepository = base.currentRepository as IModuleRepository;
        } 
    }

	
	public partial class PrivilegesService : BaseService<Privileges>, IPrivilegesService
    {
		new public IPrivilegesRepository currentRepository { get; set; }
		        
        public PrivilegesService()
            : base(RepositoryFactory.Create<IPrivilegesRepository>())
        {
			//设置当前仓储为Privileges仓储
			currentRepository = base.currentRepository as IPrivilegesRepository;
        } 
    }

	
	public partial class RelationPrivilegesRoleService : BaseService<RelationPrivilegesRole>, IRelationPrivilegesRoleService
    {
		new public IRelationPrivilegesRoleRepository currentRepository { get; set; }
		        
        public RelationPrivilegesRoleService()
            : base(RepositoryFactory.Create<IRelationPrivilegesRoleRepository>())
        {
			//设置当前仓储为RelationPrivilegesRole仓储
			currentRepository = base.currentRepository as IRelationPrivilegesRoleRepository;
        } 
    }

	
	public partial class RelationPrivilegesShopsService : BaseService<RelationPrivilegesShops>, IRelationPrivilegesShopsService
    {
		new public IRelationPrivilegesShopsRepository currentRepository { get; set; }
		        
        public RelationPrivilegesShopsService()
            : base(RepositoryFactory.Create<IRelationPrivilegesShopsRepository>())
        {
			//设置当前仓储为RelationPrivilegesShops仓储
			currentRepository = base.currentRepository as IRelationPrivilegesShopsRepository;
        } 
    }

	
	public partial class RelationPrivilegesStoresService : BaseService<RelationPrivilegesStores>, IRelationPrivilegesStoresService
    {
		new public IRelationPrivilegesStoresRepository currentRepository { get; set; }
		        
        public RelationPrivilegesStoresService()
            : base(RepositoryFactory.Create<IRelationPrivilegesStoresRepository>())
        {
			//设置当前仓储为RelationPrivilegesStores仓储
			currentRepository = base.currentRepository as IRelationPrivilegesStoresRepository;
        } 
    }

	
	public partial class RelationPrivilegesSystemService : BaseService<RelationPrivilegesSystem>, IRelationPrivilegesSystemService
    {
		new public IRelationPrivilegesSystemRepository currentRepository { get; set; }
		        
        public RelationPrivilegesSystemService()
            : base(RepositoryFactory.Create<IRelationPrivilegesSystemRepository>())
        {
			//设置当前仓储为RelationPrivilegesSystem仓储
			currentRepository = base.currentRepository as IRelationPrivilegesSystemRepository;
        } 
    }

	
	public partial class RelationPrivilegesUsersService : BaseService<RelationPrivilegesUsers>, IRelationPrivilegesUsersService
    {
		new public IRelationPrivilegesUsersRepository currentRepository { get; set; }
		        
        public RelationPrivilegesUsersService()
            : base(RepositoryFactory.Create<IRelationPrivilegesUsersRepository>())
        {
			//设置当前仓储为RelationPrivilegesUsers仓储
			currentRepository = base.currentRepository as IRelationPrivilegesUsersRepository;
        } 
    }

	
	public partial class RelationRoleModuleService : BaseService<RelationRoleModule>, IRelationRoleModuleService
    {
		new public IRelationRoleModuleRepository currentRepository { get; set; }
		        
        public RelationRoleModuleService()
            : base(RepositoryFactory.Create<IRelationRoleModuleRepository>())
        {
			//设置当前仓储为RelationRoleModule仓储
			currentRepository = base.currentRepository as IRelationRoleModuleRepository;
        } 
    }

	
	public partial class RelationShopsModuleService : BaseService<RelationShopsModule>, IRelationShopsModuleService
    {
		new public IRelationShopsModuleRepository currentRepository { get; set; }
		        
        public RelationShopsModuleService()
            : base(RepositoryFactory.Create<IRelationShopsModuleRepository>())
        {
			//设置当前仓储为RelationShopsModule仓储
			currentRepository = base.currentRepository as IRelationShopsModuleRepository;
        } 
    }

	
	public partial class RelationShopVersionModuleService : BaseService<RelationShopVersionModule>, IRelationShopVersionModuleService
    {
		new public IRelationShopVersionModuleRepository currentRepository { get; set; }
		        
        public RelationShopVersionModuleService()
            : base(RepositoryFactory.Create<IRelationShopVersionModuleRepository>())
        {
			//设置当前仓储为RelationShopVersionModule仓储
			currentRepository = base.currentRepository as IRelationShopVersionModuleRepository;
        } 
    }

	
	public partial class RelationStoresModuleService : BaseService<RelationStoresModule>, IRelationStoresModuleService
    {
		new public IRelationStoresModuleRepository currentRepository { get; set; }
		        
        public RelationStoresModuleService()
            : base(RepositoryFactory.Create<IRelationStoresModuleRepository>())
        {
			//设置当前仓储为RelationStoresModule仓储
			currentRepository = base.currentRepository as IRelationStoresModuleRepository;
        } 
    }

	
	public partial class RelationUserRoleService : BaseService<RelationUserRole>, IRelationUserRoleService
    {
		new public IRelationUserRoleRepository currentRepository { get; set; }
		        
        public RelationUserRoleService()
            : base(RepositoryFactory.Create<IRelationUserRoleRepository>())
        {
			//设置当前仓储为RelationUserRole仓储
			currentRepository = base.currentRepository as IRelationUserRoleRepository;
        } 
    }

	
	public partial class RelationUsersModuleService : BaseService<RelationUsersModule>, IRelationUsersModuleService
    {
		new public IRelationUsersModuleRepository currentRepository { get; set; }
		        
        public RelationUsersModuleService()
            : base(RepositoryFactory.Create<IRelationUsersModuleRepository>())
        {
			//设置当前仓储为RelationUsersModule仓储
			currentRepository = base.currentRepository as IRelationUsersModuleRepository;
        } 
    }

	
	public partial class RoleService : BaseService<Role>, IRoleService
    {
		new public IRoleRepository currentRepository { get; set; }
		        
        public RoleService()
            : base(RepositoryFactory.Create<IRoleRepository>())
        {
			//设置当前仓储为Role仓储
			currentRepository = base.currentRepository as IRoleRepository;
        } 
    }

	
	public partial class ShopsService : BaseService<Shops>, IShopsService
    {
		new public IShopsRepository currentRepository { get; set; }
		        
        public ShopsService()
            : base(RepositoryFactory.Create<IShopsRepository>())
        {
			//设置当前仓储为Shops仓储
			currentRepository = base.currentRepository as IShopsRepository;
        } 
    }

	
	public partial class ShopVersionService : BaseService<ShopVersion>, IShopVersionService
    {
		new public IShopVersionRepository currentRepository { get; set; }
		        
        public ShopVersionService()
            : base(RepositoryFactory.Create<IShopVersionRepository>())
        {
			//设置当前仓储为ShopVersion仓储
			currentRepository = base.currentRepository as IShopVersionRepository;
        } 
    }

	
	public partial class StoresService : BaseService<Stores>, IStoresService
    {
		new public IStoresRepository currentRepository { get; set; }
		        
        public StoresService()
            : base(RepositoryFactory.Create<IStoresRepository>())
        {
			//设置当前仓储为Stores仓储
			currentRepository = base.currentRepository as IStoresRepository;
        } 
    }

	
	public partial class UserOperationLogService : BaseService<UserOperationLog>, IUserOperationLogService
    {
		new public IUserOperationLogRepository currentRepository { get; set; }
		        
        public UserOperationLogService()
            : base(RepositoryFactory.Create<IUserOperationLogRepository>())
        {
			//设置当前仓储为UserOperationLog仓储
			currentRepository = base.currentRepository as IUserOperationLogRepository;
        } 
    }

	
	public partial class UsersService : BaseService<Users>, IUsersService
    {
		new public IUsersRepository currentRepository { get; set; }
		        
        public UsersService()
            : base(RepositoryFactory.Create<IUsersRepository>())
        {
			//设置当前仓储为Users仓储
			currentRepository = base.currentRepository as IUsersRepository;
        } 
    }

	

}






